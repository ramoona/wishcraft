name: Dev

on:
  push:
    branches:
      - main

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          cache: "pnpm"

      - name: Install dependencies
        run: |
          pnpm install
          pnpm prisma:generate

      - name: Disable Next.js telemetry
        run: pnpm next telemetry disable

      - name: Run ESLint
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: pnpm lint

      - name: Run TS
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: pnpm typecheck

      - name: Run unit tests
        run: pnpm test:unit

  e2e-tests:
    name: Run end-to-end tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: e2e_tests
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5445:5432

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          cache: "pnpm"

      - name: Use Next's build cache
        uses: actions/cache@v4
        with:
          # Cache next's build cache
          path: ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('src/**/*.{js,jsx,ts,tsx}') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        run: |
          pnpm install
          pnpm prisma:generate

      - name: Create environment variables
        run: |
          echo '
          DATABASE_URL=postgresql://postgres:postgres@localhost:5445/e2e_tests
          GOOGLE_CLIENT_ID="test"
          GOOGLE_CLIENT_SECRET="test"
          POSTGRES_USER="postgres"
          POSTGRES_PASSWORD="postgres"
          POSTGRES_DB="e2e_tests"
          ' >> .env.test &&
           cp .env.test .env

      - name: Prepare database
        run: pnpm e2e-tests:db-reset

      - name: Prepare testing environment
        run: pnpm e2e-tests:prepare

      - name: Build Next.js app
        run: pnpm build

      - name: Run end-to-end tests
        run: pnpm e2e-tests:run
