generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  firstName                String
  lastName                 String
  username                 String    @unique
  email                    String    @unique
  emailVerified            Boolean?
  dateOfBirth              DateTime? @db.Date
  image                    String?
  sessions                 Session[]
  completedOnboardingSteps String[]

  // oAuth
  googleId String?

  // Relations
  wishlists Wishlist[]
  reserved  Wish[]
  friends   Friend[]   @relation("FriendA")
  friendOf  Friend[]   @relation("FriendB")

  // Preferences
  defaultCurrency String?
  showReserved    Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WishStatus {
  ACTIVE
  RESERVED
  FULFILLED
  ARCHIVED
}

model Wishlist {
  id      String @id @default(cuid())
  wishes  Wish[]
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wish {
  id        String     @id @default(cuid())
  name      String
  price     Float?
  currency  String?
  url       String?
  comment   String?
  status    WishStatus
  isPrivate Boolean?

  reservedBy   User?    @relation(fields: [reservedById], references: [id])
  reservedById String?
  wishlist     Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  friendAId String
  friendBId String

  friendA User @relation("FriendA", fields: [friendAId], references: [id])
  friendB User @relation("FriendB", fields: [friendBId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([friendAId, friendBId])
}

model UserActionsLog {
  id        String   @id @default(cuid())
  payload   Json
  createdAt DateTime @default(now())
}
