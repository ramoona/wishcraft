generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Next Auth columns
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // App columns
  wishlists Wishlist[]
  reserved  Wish[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Currency {
  EUR
  USD
}

enum WishStatus {
  ACTIVE
  RESERVED
  FULFILLED
  ARCHIVED
}

model Wishlist {
  id      String @id @default(cuid())
  wishes  Wish[]
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wish {
  id       String     @id @default(cuid())
  name     String
  price    Float?
  currency Currency?
  url      String?
  comment  String?
  status   WishStatus

  reservedBy   User?    @relation(fields: [reservedById], references: [id])
  reservedById String?
  wishlist     Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
